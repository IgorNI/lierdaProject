package com.android.hiparker.lierda_light.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIGHT".
*/
public class LightDao extends AbstractDao<LightTemp, String> {

    public static final String TABLENAME = "LIGHT";

    /**
     * Properties of entity Light.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", true, "ADDRESS");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Color = new Property(2, Integer.class, "color", false, "COLOR");
        public final static Property Value1 = new Property(3, Integer.class, "value1", false, "VALUE1");
        public final static Property Value2 = new Property(4, Integer.class, "value2", false, "VALUE2");
        public final static Property Value3 = new Property(5, Integer.class, "value3", false, "VALUE3");
        public final static Property Value4 = new Property(6, Integer.class, "value4", false, "VALUE4");
    };


    public LightDao(DaoConfig config) {
        super(config);
    }
    
    public LightDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIGHT\" (" + //
                "\"ADDRESS\" TEXT PRIMARY KEY NOT NULL ," + // 0: address
                "\"NAME\" TEXT," + // 1: name
                "\"COLOR\" INTEGER," + // 2: color
                "\"VALUE1\" INTEGER," + // 3: value1
                "\"VALUE2\" INTEGER," + // 4: value2
                "\"VALUE3\" INTEGER," + // 5: value3
                "\"VALUE4\" INTEGER);"); // 6: value4
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIGHT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightTemp entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(3, color);
        }
 
        Integer value1 = entity.getValue1();
        if (value1 != null) {
            stmt.bindLong(4, value1);
        }
 
        Integer value2 = entity.getValue2();
        if (value2 != null) {
            stmt.bindLong(5, value2);
        }
 
        Integer value3 = entity.getValue3();
        if (value3 != null) {
            stmt.bindLong(6, value3);
        }
 
        Integer value4 = entity.getValue4();
        if (value4 != null) {
            stmt.bindLong(7, value4);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LightTemp readEntity(Cursor cursor, int offset) {
        LightTemp entity = new LightTemp( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // color
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // value1
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // value2
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // value3
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // value4
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LightTemp entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColor(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setValue1(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setValue2(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setValue3(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setValue4(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LightTemp entity, long rowId) {
        return entity.getAddress();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LightTemp entity) {
        if(entity != null) {
            return entity.getAddress();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
