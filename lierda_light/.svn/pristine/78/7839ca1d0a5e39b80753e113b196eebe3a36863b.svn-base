package com.android.hiparker.lierda_light.view;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.android.hiparker.lierda_light.R;
import com.android.hiparker.lierda_light.dao.LightTemp;
import com.android.hiparker.lierda_light.utils.ScreenUtil;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.FontMetrics;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class LightGroupView extends View {

    private int mDefaultWidth = 500;
    private int mDefaultHeight = 100;
    
    private float mTickSize;
    private float mTickTextSize;
    private int mTickTextColor;
    private float mTextSize;
    private int mTickSrc;
    private float mSize;
    private int mBgColor;
    private Paint mPaint;
    private Bitmap mTickBitmap;
    
	private List<LightTemp> mLights;
	private List<LightThumb> mThumbs;
	private LightGroupViewListener mListener;

    public LightGroupView(Context context) {
        super(context);
    }

    public LightGroupView(Context context, AttributeSet attrs) {
        super(context, attrs);
        viewInit(context, attrs);
    }

    public LightGroupView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        viewInit(context, attrs);
    }
    
    private void viewInit(Context context, AttributeSet attrs) {
    	mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    	mPaint.setAntiAlias(true);
    	mBgColor = context.getResources().getColor(R.color.common_color_gray_text);
    	TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.LightGroupView, 0, 0);
    	mLights = new ArrayList<LightTemp>();
    	mThumbs = new ArrayList<LightThumb>();
        try {
        	mTickSize = ta.getDimension(R.styleable.LightGroupView_tickSize, ScreenUtil.dip2px(42));
            mTickTextSize = ta.getDimension(R.styleable.LightGroupView_tickTextSize, context.getResources().getDimension(R.dimen.common_size_tiny));
            mTickTextColor = ta.getColor(R.styleable.LightGroupView_tickTextColor, Color.LTGRAY);
            mTextSize = ta.getDimension(R.styleable.LightGroupView_textSize, ScreenUtil.sp2px(68));
            mTickSrc = ta.getResourceId(R.styleable.LightGroupView_tickSrc, R.drawable.default_light);
        } finally {
            ta.recycle();
        }
        mTickBitmap = BitmapFactory.decodeResource(context.getResources(), mTickSrc);
    }
    
    public void setLights(List<LightTemp> lights) {
    	mLights.clear();
    	mLights.addAll(lights);
    }
    
    public void addLight(LightTemp...temps) {
    	if (temps == null || temps.length == 0) {
    		return;
    	}
    	for (LightTemp temp : temps) {
    		mLights.add(temp);
    		
    		LightThumb thumb = new LightThumb(temp, mTickBitmap, mTickSize, temp.getColor(), mTickTextSize, mPaint);
    		mThumbs.add(thumb);
    	}
    	measureThumbs();
    	invalidate();
    	if (mListener != null) {
    		mListener.onValueChange();
    	}
    }
    
    public void deleteLight(String str) {
    	int index = mLights.indexOf(str);
    	if (index > -1) {
    		mLights.remove(index);
    		mThumbs.remove(index);
    		
        	measureThumbs();
        	invalidate();
        	
        	if (mListener != null) {
        		mListener.onValueChange();
        	}
    	}
    }


    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

        int width;
        int height;

        // Get measureSpec mode and size values.
        final int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);
        final int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);
        final int measureWidth = MeasureSpec.getSize(widthMeasureSpec);
        final int measureHeight = MeasureSpec.getSize(heightMeasureSpec);

        // The RangeBar width should be as large as possible.
        if (measureWidthMode == MeasureSpec.AT_MOST) {
            width = measureWidth;
        } else if (measureWidthMode == MeasureSpec.EXACTLY) {
            width = measureWidth;
        } else {
            width = mDefaultWidth;
        }

        // The RangeBar height should be as small as possible.
        if (measureHeightMode == MeasureSpec.AT_MOST) {
            height = Math.min(mDefaultHeight, measureHeight);
        } else if (measureHeightMode == MeasureSpec.EXACTLY) {
            height = measureHeight;
        } else {
            height = mDefaultHeight;
        }

        setMeasuredDimension(width, height);
    }
    
    private void measureThumbs() {
    	int w = this.getWidth();
    	int h = this.getHeight();
    	
    	int count = mLights.size();
    	double jiange = Math.PI * 2/count;
    	double current = 0;
    	double bgR = (mSize)/2 - mTickSize;
    	for (LightThumb thumb : mThumbs) {
    		double x = 0;
    		double y = 0;
    		if (current < Math.PI/2) {
    			x = w/2 + bgR * Math.sin(current);
    			y = h/2 - bgR * Math.cos(current);
    		} else if (current < Math.PI) {
    			x = w/2 + bgR * Math.sin(Math.PI - current);
    			y = h/2 + bgR * Math.cos(Math.PI - current);
    		} else if (current < Math.PI *3 /2) {
    			x = w/2 - bgR * Math.sin(current - Math.PI);
    			y = h/2 + bgR * Math.cos(current - Math.PI);
    		} else {
    			x = w/2 - bgR * Math.sin(Math.PI * 2 - current);
    			y = h/2 - bgR * Math.cos(Math.PI * 2 - current);
    		}
    		
    		thumb.centerX = (float) x;
    		thumb.centerY = (float) y;
    		
    		current += jiange;
    	}
    }
    
    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {

        super.onSizeChanged(w, h, oldw, oldh);

        final Context ctx = getContext();
        mSize = w > h?h:w;
        
        measureThumbs();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        drawBackground(canvas);
        drawLightCount(canvas);
        drawLightTick(canvas);
    }
    
    private void drawBackground(Canvas canvas) {
    	int w = getWidth();
    	int h = getHeight();
    	
    	mPaint.setColor(mBgColor);
    	mPaint.setStyle(Paint.Style.STROKE);
    	canvas.drawCircle(w/2, h/2, (mSize)/2 - mTickSize, mPaint);
    }
    
    private void drawLightCount(Canvas canvas) {
    	int w = getWidth();
    	int h = getHeight();
    	
    	int count = mLights.size();
    	mPaint.setTextSize(mTextSize);
    	mPaint.setColor(mBgColor);
    	mPaint.setStrokeWidth(3);
    	mPaint.setStyle(Paint.Style.FILL);
    	mPaint.setTextAlign(Paint.Align.CENTER);
    	
    	FontMetrics fr = mPaint.getFontMetrics();
    	float fontHeight = fr.bottom + fr.top;
    	float testBaseY = (h - fontHeight)/2;
    	canvas.drawText(String.valueOf(count), w/2, testBaseY, mPaint);
    }
    
    private void drawLightTick(Canvas canvas) {
    	
    	for (LightThumb thumb : mThumbs) {
    		thumb.draw(canvas);
    	}
    }
    
    @Override
    public boolean onTouchEvent(MotionEvent event) {

        // If this View is not enabled, don't allow for touch interactions.
        if (!isEnabled()) {
            return false;
        }

        switch (event.getAction()) {

            case MotionEvent.ACTION_DOWN:
                onActionDown(event.getX(), event.getY());
                return true;

            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                this.getParent().requestDisallowInterceptTouchEvent(false);
                onActionUp(event.getX(), event.getY());
                return true;

            case MotionEvent.ACTION_MOVE:
                onActionMove(event.getX(), event.getY());
                this.getParent().requestDisallowInterceptTouchEvent(true);
                return true;

            default:
                return false;
        }
    }
    

    /**
     * Handles a {@link MotionEvent#ACTION_DOWN} event.
     * 
     * @param x the x-coordinate of the down action
     * @param y the y-coordinate of the down action
     */
    private void onActionDown(float x, float y) {
    	
    	for (LightThumb thumb : mThumbs) {
    		if (!thumb.isPressed() && thumb.isInTargetZone(x, y)) {
    			pressThumb(thumb);
    		}
    	}
    }

    /**
     * Handles a {@link MotionEvent#ACTION_UP} or 
     * {@link MotionEvent#ACTION_CANCEL} event.
     * 
     * @param x the x-coordinate of the up action
     * @param y the y-coordinate of the up action
     */
    private void onActionUp(float x, float y) {

    	Iterator<LightThumb> iterator = mThumbs.iterator();
    	while (iterator.hasNext()) {
    		LightThumb thumb = iterator.next();
    		if (mListener != null && thumb.isPressed() && thumb.isInTargetZone(x, y)) {
    			int index = mThumbs.indexOf(thumb);
    			LightTemp temp = mLights.get(index);
    			mListener.onItemClick(index, temp.getAddress());
    			releaseThumb(thumb);
    			break;
    		}
    	}
	}

    /**
     * Handles a {@link MotionEvent#ACTION_MOVE} event.
     * 
     * @param x the x-coordinate of the move event
     */
    private void onActionMove(float x, float y) {
    	for (LightThumb thumb : mThumbs) {
    		if (thumb.isPressed()) {
    			if (!thumb.isInTargetZone(x, y)) {
    				releaseThumb(thumb);
    			}
    		}
    	}
    }
    
    /**
     * Set the thumb to be in the pressed state and calls invalidate() to redraw
     * the canvas to reflect the updated state.
     * 
     * @param thumb the thumb to press
     */
    private void pressThumb(LightThumb thumb) {
        thumb.press();
        invalidate();
    }

    /**
     * Set the thumb to be in the normal/un-pressed state and calls invalidate()
     * to redraw the canvas to reflect the updated state.
     * 
     * @param thumb the thumb to release
     */
    private void releaseThumb(LightThumb thumb) {
        thumb.release();
        invalidate();
    }
    
    public static interface LightGroupViewListener {
    	public void onItemClick(int index, String address);
    	public void onValueChange();
    }
    
    public void setOnItemClickListener(LightGroupViewListener listener) {
    	this.mListener = listener;
    }
    
    public List<LightTemp> getLights() {
    	return mLights;
    }
}
