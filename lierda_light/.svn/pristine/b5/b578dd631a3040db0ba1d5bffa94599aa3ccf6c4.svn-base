package com.android.hiparker.lierda_light.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUPS".
*/
public class GroupsDao extends AbstractDao<Groups, Long> {

    public static final String TABLENAME = "GROUPS";

    /**
     * Properties of entity Groups.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Lights = new Property(2, String.class, "lights", false, "LIGHTS");
        public final static Property Value1 = new Property(3, Integer.class, "value1", false, "VALUE1");
        public final static Property Value2 = new Property(4, Integer.class, "value2", false, "VALUE2");
        public final static Property Value3 = new Property(5, Integer.class, "value3", false, "VALUE3");
        public final static Property Value4 = new Property(6, Integer.class, "value4", false, "VALUE4");
    };


    public GroupsDao(DaoConfig config) {
        super(config);
    }
    
    public GroupsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"LIGHTS\" TEXT ,"+ // 2: lights
                "\"VALUE1\" INTEGER ," +
                "\"VALUE2\" INTEGER ," + 
                "\"VALUE3\" INTEGER ," + 
                "\"VALUE4\" INTEGER" + 
                ");"); 
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUPS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String lights = entity.getLights();
        if (lights != null) {
            stmt.bindString(3, lights);
        }
        
        stmt.bindLong(4, entity.getValue1());
        stmt.bindLong(5, entity.getValue2());
        stmt.bindLong(6, entity.getValue3());
        stmt.bindLong(7, entity.getValue4());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Groups readEntity(Cursor cursor, int offset) {
        Groups entity = new Groups( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lights
            cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3), // value1
    		cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4), // value2
			cursor.isNull(offset + 5) ? 0 : cursor.getInt(offset + 5), // value3
			cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6) // value4
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Groups entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLights(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue1(cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3));
        entity.setValue1(cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4));
        entity.setValue1(cursor.isNull(offset + 5) ? 0 : cursor.getInt(offset + 5));
        entity.setValue1(cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Groups entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Groups entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
